# Based on Actions Workflow generated by: https://github.com/Hi-Folks/gh-actions-yaml-generator
name: Build, Test and Release Laravel application (on Mysql)
on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  laravel-build-test:
    env:
      DB_CONNECTION: mysql
      DB_DATABASE: pims
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: root

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: [ '8.0' ]
        node-versions: [ '14.x' ]
        dependency-stability: [ 'prefer-none' ]
    runs-on: ${{ matrix.operating-system }}
    name: Build and Test [ P${{ matrix.php-versions }}-N${{ matrix.node-versions }}-${{ matrix.operating-system}}]

    steps:
      # Checkout Code
      - uses: actions/checkout@v2

      # MySQL
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}

      # Node.js and NPM
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions }}

      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install NPM packages
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Build frontend
        run: npm run development

      # PHP and Composer
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}

      - name: Install Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        run: composer update --prefer-stable --prefer-lowest

      # Setup Laravel Files
      - name: Show dir
        run: pwd
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Clear Laravel caches
        run: php artisan optimize:clear
      - name: Run Migrations
        run: php artisan migrate

      # Unit Test
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit --log-junit reports/test_result.xml

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: JEST Tests            # Name of the check run which will be created
          path: reports/test*.xml    # Path to test results
          reporter: jest-junit        # Format of test results

      # Code quality
#      - name: Execute Code Sniffer via phpcs
#        run: |
#          composer require --dev squizlabs/php_codesniffer
#          vendor/bin/phpcs --standard=PSR12 app

#      - name: Execute Code Static Analysis (PHP Stan + Larastan)
#        run: |
#          composer require --dev nunomaduro/larastan
#          vendor/bin/phpstan analyse app -c ./vendor/nunomaduro/larastan/extension.neon  --level=4 --no-progress
