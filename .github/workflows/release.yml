name: Build and Create Releases
on:
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: 'Release Version'
        required: true

env:
  # release
  RELEASE_NAME: PIMSV2
  RELEASE_FILE: release
  BUILD_TYPE: PRD

  # db
  DB_DATABASE: pims     #use DB_DATABASE from '.env' (or '.env.testing')
  DB_USERNAME: root         #mysql default ('ubuntu-latest'), do not change
  DB_PASSWORD: root     #mysql default ('ubuntu-latest'), do not change

jobs:
  build-test:
    strategy:
      matrix:
        php-versions: [ '8.0' ]
        node-versions: [ '14.x' ]
        dependency-stability: [ 'prefer-none' ]

    name: Build and Test [ PHP ${{ matrix.php-versions }} ]
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - uses: actions/checkout@v2

      # MySQL (MySQL8.0 is pre-installed on Ubuntu 20 and latest containers)
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }}

      # Node.js and NPM
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions }}

      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install NPM packages
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Frontend production build
        run: npm run prod

      # PHP and Composer
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}

      - name: Install Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        run: composer update --prefer-stable --prefer-lowest

      # Setup Laravel Files
      - name: Show dir
        run: pwd
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Clear Laravel caches
        run: php artisan optimize:clear
      - name: Run Migrations
        run: php artisan migrate

      # Unit Test
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit

#      - name: Publish Test Report
#        uses: mikepenz/action-junit-report@v2
#        if: always() # always run even if the previous step fails
#        with:
#          report_paths: '**/phpunit/junit.xml'

      - name: Test Report
        uses: dorny/test-reporter@v1
        if:  always()    # run this step even if previous step failed
        with:
          name: Test Report          # Name of the check run which will be created
          path:  '**/phpunit/*unit.xml'    # Path to test results
          reporter: java-junit        # Format of test results

      - name: Check Test Coverage
        id: test-coverage
        uses: johanvanhelden/gha-clover-test-coverage-check@v1
        with:
          percentage: "50"
          filename: "phpunit/clover.xml"
          exit: false

      # Code quality
      - name: Execute Code Sniffer via phpcs
        run: |
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs -n --standard=phpcs.xml .

      - name: Execute Code Static Analysis (PHP Stan + Larastan)
        env:
          RULE_LEVEL: 1 # basic checks + unknown ...
          MEMORY_SIZE: 256M
        run: |
          composer require --dev nunomaduro/larastan
          vendor/bin/phpstan analyse app -c ./vendor/nunomaduro/larastan/extension.neon  --level=${{env.RULE_LEVEL}} --no-progress --memory-limit=${{env.MEMORY_SIZE}}


      # Create archive file
      - name: Create release archive
        uses: thedoctor0/zip-release@master
        with:
          filename: release.zip
          exclusions: '*.git* .editorconfig /*node_modules/* /*storage/* /*phpunit/*'

      # Create report file
      - name: Create release archive
        uses: thedoctor0/zip-release@master
        with:
          path: phpunit
          filename: test_result.zip

      - name: Upload artifact for release
        uses: actions/upload-artifact@v2
        with:
          name: site-build
          path: |
            release.zip
            test_result.zip
          retention-days: 1

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download site content
        uses: actions/download-artifact@v2
        with:
          name: site-build

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: add add version to release
        env:
          VERSION_INFO: version-info
        run: |
          echo "project: ${{env.RELEASE_NAME}}" > ${{env.VERSION_INFO}}
          echo "version: ${{github.event.inputs.RELEASE_VERSION}}" > ${{env.VERSION_INFO}}
          echo "build: ${{steps.date.outputs.date}}.${{github.run_number}} ${{env.BUILD_TYPE}}" >> ${{env.VERSION_INFO}}
          echo "branch: ${GITHUB_REF##*/} (commit ${GITHUB_SHA::8})" >> ${{env.VERSION_INFO}}
          zip ./release.zip ${{env.VERSION_INFO}}

      - name: Get release version
        id: get_version
        run: echo ::set-output name=RELEASE_VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Create GitHub release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{env.RELEASE_NAME}} ${{github.event.inputs.RELEASE_VERSION}}_${{ github.run_number }}
          tag_name: ${{github.event.inputs.RELEASE_VERSION}}_${{ github.run_number }}

      - name: Upload release asset to GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url}}
          asset_path: release.zip
          asset_name: ${{env.RELEASE_FILE}}_${{github.event.inputs.RELEASE_VERSION}}.zip
          asset_content_type: application/zip

      - name: Upload report asset to GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url}}
          asset_path: test_result.zip
          asset_name: test_result.zip
          asset_content_type: application/zip