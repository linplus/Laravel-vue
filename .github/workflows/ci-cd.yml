name: (CI/CD) Build, Test and Release Draft
on:
  pull_request:
    branches:
      - master
    types: [closed]

env:
  # release
  RELEASE_NAME: PIMSV2
  RELEASE_VERSION: 1.0.0 CI
  RELEASE_FILE: release_ci
  BUILD_TYPE: CI
  DRAFT_RETANTION: 1d
  # db
  DB_DATABASE: pims     #use DB_DATABASE from '.env' (or '.env.testing')
  DB_USERNAME: root         #mysql default ('ubuntu-latest'), do not change
  DB_PASSWORD: root     #mysql default ('ubuntu-latest'), do not change

jobs:
  build-test:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    strategy:
      matrix:
        php-versions: [ '8.0' ]
        node-versions: [ '14.x' ]
        dependency-stability: [ 'prefer-none' ]

    name: Build and Test [ PHP ${{ matrix.php-versions }} ]
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - uses: actions/checkout@v2

      # MySQL (MySQL8.0 is pre-installed on Ubuntu 20 and latest containers)
      - name: Set up MySQL
        run: |
          sudo /etc/init.d/mysql start
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USERNAME }} -p${{ env.DB_PASSWORD }}

      # Node.js and NPM
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-versions }}

      - name: Cache node_modules directory
        uses: actions/cache@v2
        id: node_modules-cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package.json') }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install NPM packages
        if: steps.node_modules-cache.outputs.cache-hit != 'true'
        run: npm ci
      - name: Frontend development build
        run: npm run dev

      # PHP and Composer
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v2
        id: actions-cache
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-
      - name: Cache PHP dependencies
        uses: actions/cache@v2
        id: vendor-cache
        with:
          path: vendor
          key: ${{ runner.OS }}-build-${{ hashFiles('**/composer.lock') }}

      - name: Install Dependencies
        if: steps.vendor-cache.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Update Dependencies with latest stable
        if: matrix.dependency-stability == 'prefer-stable'
        run: composer update --prefer-stable
      - name: Update Dependencies with lowest stable
        if: matrix.dependency-stability == 'prefer-lowest'
        run: composer update --prefer-stable --prefer-lowest

      # Setup Laravel Files
      - name: Show dir
        run: pwd
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Generate key
        run: php artisan key:generate
      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Clear Laravel caches
        run: php artisan optimize:clear
      - name: Run Migrations
        run: php artisan migrate

      # Unit Test
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit --log-junit test-results/phpunit.xml

      - run: cat test-results/phpunit.xml
      - name: Publish PHPUnit Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: test-results/**/*.xml

      # Code quality
#      - name: Execute Code Sniffer via phpcs
#        run: |
#          composer require --dev squizlabs/php_codesniffer
#          vendor/bin/phpcs --standard=PSR12 app

#      - name: Execute Code Static Analysis (PHP Stan + Larastan)
#        run: |
#          composer require --dev nunomaduro/larastan
#          vendor/bin/phpstan analyse app -c ./vendor/nunomaduro/larastan/extension.neon  --level=4 --no-progress

      - name: Create release archieve
        uses: thedoctor0/zip-release@master
        with:
          filename: release.zip
          exclusions: '*.git* .editorconfig /*storage/*'

      - name: Upload artifact for release
        uses: actions/upload-artifact@v2
        with:
          name: site-build
          path: release.zip
          retention-days: 1

  release:
    name: Create CI Release
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download site content
        uses: actions/download-artifact@v2
        with:
          name: site-build

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y%m%d')"

      - name: add add version to release
        run: |
          echo "project: ${{env.RELEASE_NAME}}" > version-info
          echo "version: ${{env.RELEASE_VERSION}}" > version-info
          echo "build: ${{steps.date.outputs.date}}.${{github.run_number}} ${{env.BUILD_TYPE}}" >> version-info
          zip ./release.zip version-info


      - name: Create GitHub draft release
        id: create-new-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_name: ${{steps.date.outputs.date}}.${{github.run_number}} ${{env.BUILD_TYPE}}
          tag_name: ${{steps.date.outputs.date}}.${{github.run_number}}
          draft: true

      - name: Upload asset to GitHub
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-new-release.outputs.upload_url}}
          asset_path: ./release.zip
          asset_name: ${{env.RELEASE_FILE}}.zip
          asset_content_type: application/zip

      - name: Delete old drafts
        uses: hugo19941994/delete-draft-releases@v1.0.0
        with:
          threshold: ${{env.DRAFT_RETANTION}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
